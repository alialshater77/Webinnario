<script lang="ts">
	import { onMount } from 'svelte';
	import { Bar } from 'svelte-chartjs';
	import { Chart, registerables } from 'chart.js';
	import type { ChartData, ChartOptions } from 'chart.js';

	// Register all necessary Chart.js components
	Chart.register(...registerables);

	export let statistics: { count: number; correct: boolean }[] = [];

	let data: ChartData<'bar', number[], string> = {
		labels: statistics.map((_, index) => `Item ${index + 1}`),
		datasets: [
			{
				label: 'Correct',
				data: statistics.map((stat) => (stat.correct ? stat.count : 0)),
				backgroundColor: 'rgba(75, 192, 192, 0.2)',
				borderColor: 'rgba(75, 192, 192, 1)',
				borderWidth: 1
			},
			{
				label: 'Incorrect',
				data: statistics.map((stat) => (stat.correct ? 0 : stat.count)),
				backgroundColor: 'rgba(255, 99, 132, 0.2)',
				borderColor: 'rgba(255, 99, 132, 1)',
				borderWidth: 1
			}
		]
	};

	let options: ChartOptions<'bar'> = {
		scales: {
			y: {
				beginAtZero: true,
				grid: {
					display: true,
					color: 'rgba(0, 0, 0, 0.1)'
				}
			},
			x: {
				grid: {
					display: false
				}
			}
		},
		plugins: {
			legend: {
				position: 'top'
			}
		}
	};

	$: data.labels = statistics.map((_, index) => `Item ${index + 1}`);
	$: data.datasets[0].data = statistics.map((stat) => (stat.correct ? stat.count : 0));
	$: data.datasets[1].data = statistics.map((stat) => (stat.correct ? 0 : stat.count));
</script>

<div class="chart-container">
	<Bar {data} {options} />
</div>

<style>
	.chart-container {
		width: 100%;
		max-height: 400px;
		border: 1px solid #ccc;
		border-radius: 8px;
		padding: 1rem;
		box-sizing: border-box;
	}
</style>
